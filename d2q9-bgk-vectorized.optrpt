Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -std=c99 -Wall -Ofast -mtune=native -xHOST -fma -qopt-report=5 -fopenmp -restrict -align -lm -o d2q9-bgk-vectorized

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: true
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/12=8.3%] d2q9-bgk-vectorized.c(139,1)
  -> INLINE: (155,5) usage(const char *) (isz = 6) (sz = 10)
    -> EXTERN: (885,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (886,3) exit(int)
  -> EXTERN: (164,3) gettimeofday(struct timeval *, __timezone_ptr_t)
  -> (167,3) initialise(const char *, const char *, t_param *, t_speed_new **, t_speed_new **, int **, float **) (isz = 911) (sz = 930)
     [[ Inlining would exceed -inline-max-size value (930>253) <1>]]
  -> EXTERN: (170,3) gettimeofday(struct timeval *, __timezone_ptr_t)
  -> INLINE: (176,19) timestep(const t_param, t_speed_new **, t_speed_new **, int *) (isz = 153) (sz = 166)
    -> INLINE: (211,3) accelerate_flow(const t_param, t_speed_new *, int *) (isz = 136) (sz = 147)
    -> (216,18) rebound_collision(const t_param, t_speed_new *, t_speed_new *, int *) (isz = 651) (sz = 664)
       [[ Inlining would exceed -inline-max-size value (664>253) <1>]]
  -> EXTERN: (185,3) gettimeofday(struct timeval *, __timezone_ptr_t)
  -> EXTERN: (192,3) gettimeofday(struct timeval *, __timezone_ptr_t)
  -> EXTERN: (197,3) printf(const char *, ...)
  -> EXTERN: (198,3) printf(const char *, ...)
  -> INLINE: (198,41) calc_reynolds(const t_param, t_speed_new *, int *) (isz = 214) (sz = 225)
    -> INLINE: (762,10) av_velocity(const t_param, t_speed_new *, int *) (isz = 204) (sz = 215)
  -> EXTERN: (199,3) printf(const char *, ...)
  -> EXTERN: (200,3) printf(const char *, ...)
  -> EXTERN: (201,3) printf(const char *, ...)
  -> EXTERN: (202,3) printf(const char *, ...)
  -> (203,3) write_values(const t_param, t_speed_new *, int *, float *) (isz = 314) (sz = 327)
     [[ Inlining would exceed -inline-max-size value (327>253) <1>]]
  -> INLINE: (204,3) finalise(const t_param *, t_speed_new **, t_speed_new **, int **, float **) (isz = 14) (sz = 29)
    -> EXTERN: (742,3) _mm_free(void *)
    -> EXTERN: (745,3) _mm_free(void *)
    -> EXTERN: (748,3) free(void *)
    -> EXTERN: (751,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(174,3)
   remark #15382: vectorization support: call to function rebound_collision(const t_param, t_speed_new *, t_speed_new *, int *) cannot be vectorized   [ d2q9-bgk-vectorized.c(216,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between params (176:19) and params.params (232:3)
   remark #15346: vector dependence: assumed ANTI dependence between params.params (232:3) and params (176:19)

   LOOP BEGIN at d2q9-bgk-vectorized.c(232,3) inlined into d2q9-bgk-vectorized.c(176,19)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speed1+(ii+jj*params.params)*4) (242:7) and *(cells->speed7+(ii+jj*params.params)*4) (248:7)
      remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speed7+(ii+jj*params.params)*4) (248:7) and *(cells->speed1+(ii+jj*params.params)*4) (242:7)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(504,3) inlined into d2q9-bgk-vectorized.c(198,41)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5) inlined into d2q9-bgk-vectorized.c(198,41)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5) inlined into d2q9-bgk-vectorized.c(198,41)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.params] has unaligned access   [ d2q9-bgk-vectorized.c(514,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(515,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(516,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(517,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(518,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(519,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(520,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(521,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(522,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(525,22) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(526,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(527,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(528,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(529,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(530,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(533,22) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(534,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(535,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(536,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(537,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.params)*4) has unaligned access   [ d2q9-bgk-vectorized.c(538,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 147 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.890 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5) inlined into d2q9-bgk-vectorized.c(198,41)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(176,19):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk-vectorized.c(216,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk-vectorized.c(198,41):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
d2q9-bgk-vectorized.c(203,3):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk-vectorized.c(139,1):remark #34051: REGISTER ALLOCATION : [main] d2q9-bgk-vectorized.c:139

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     393
            Global    :      67
            Local     :     326
        Regenerable   :      60
        Spilled       :      17
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :      42 [7.96e+01 ~ 1.9%]
            Writes    :      18 [3.60e+01 ~ 0.8%]
        Spills        :      96 bytes*
            Reads     :      18 [5.00e+01 ~ 1.2%]
            Writes    :      14 [3.10e+01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: rebound_collision(const t_param, t_speed_new *, t_speed_new *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (rebound_collision(const t_param, t_speed_new *, t_speed_new *, int *)) [2/12=16.7%] d2q9-bgk-vectorized.c(256,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(315,5)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=7
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(315,5)
   remark #25261: Invariant Condition eliminated(Proven True) at line 320
   remark #25258: Invariant Condition eliminated(Loop at level 1 peeled) at line 322 
   remark #25260: Invariant Condition eliminated(Proven False) at line 322
   remark #15388: vectorization support: reference tmp_cells->speed1[index] has aligned access   [ d2q9-bgk-vectorized.c(329,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[index] has aligned access   [ d2q9-bgk-vectorized.c(330,9) ]
   remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(330,36) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[index] has aligned access   [ d2q9-bgk-vectorized.c(331,9) ]
   remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(331,36) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[index] has aligned access   [ d2q9-bgk-vectorized.c(332,9) ]
   remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(332,36) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[index] has aligned access   [ d2q9-bgk-vectorized.c(333,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[index] has aligned access   [ d2q9-bgk-vectorized.c(334,9) ]
   remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(334,36) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[index] has aligned access   [ d2q9-bgk-vectorized.c(335,9) ]
   remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(335,36) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[index] has aligned access   [ d2q9-bgk-vectorized.c(336,9) ]
   remark #15388: vectorization support: reference cells->speed0[ii+jj*params.nx] has aligned access   [ d2q9-bgk-vectorized.c(343,18) ]
   remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(344,18) ]
   remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(345,18) ]
   remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(347,18) ]
   remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(348,18) ]
   remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(351,18) ]
   remark #15388: vectorization support: reference tmp_cells->speed0[index] has aligned access   [ d2q9-bgk-vectorized.c(443,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[index] has aligned access   [ d2q9-bgk-vectorized.c(444,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[index] has aligned access   [ d2q9-bgk-vectorized.c(445,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[index] has aligned access   [ d2q9-bgk-vectorized.c(446,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[index] has aligned access   [ d2q9-bgk-vectorized.c(447,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[index] has aligned access   [ d2q9-bgk-vectorized.c(448,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[index] has aligned access   [ d2q9-bgk-vectorized.c(449,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[index] has aligned access   [ d2q9-bgk-vectorized.c(450,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[index] has aligned access   [ d2q9-bgk-vectorized.c(451,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[index] has aligned access   [ d2q9-bgk-vectorized.c(329,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[index] has aligned access   [ d2q9-bgk-vectorized.c(330,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[index] has aligned access   [ d2q9-bgk-vectorized.c(331,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[index] has aligned access   [ d2q9-bgk-vectorized.c(332,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[index] has aligned access   [ d2q9-bgk-vectorized.c(333,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[index] has aligned access   [ d2q9-bgk-vectorized.c(334,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[index] has aligned access   [ d2q9-bgk-vectorized.c(335,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[index] has aligned access   [ d2q9-bgk-vectorized.c(336,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed1[index] has aligned access   [ d2q9-bgk-vectorized.c(444,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed2[index] has aligned access   [ d2q9-bgk-vectorized.c(445,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed3[index] has aligned access   [ d2q9-bgk-vectorized.c(446,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed4[index] has aligned access   [ d2q9-bgk-vectorized.c(447,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed5[index] has aligned access   [ d2q9-bgk-vectorized.c(448,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed6[index] has aligned access   [ d2q9-bgk-vectorized.c(449,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed7[index] has aligned access   [ d2q9-bgk-vectorized.c(450,9) ]
   remark #15388: vectorization support: reference tmp_cells->speed8[index] has aligned access   [ d2q9-bgk-vectorized.c(451,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(329,36) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(333,36) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(336,36) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(346,18) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(349,18) ]
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(350,18) ]
   remark #15305: vectorization support: vector length 8
   remark #15309: vectorization support: normalized vectorization overhead 0.227
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 25 
   remark #15451: unmasked unaligned unit stride stores: 16 
   remark #15456: masked unaligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 306 
   remark #15477: vector cost: 110.000 
   remark #15478: estimated potential speedup: 2.580 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(315,5)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(312,3)
   remark #25261: Invariant Condition eliminated(Proven True) at line 322
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vectorized.c(315,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(315,5)
      remark #25258: Invariant Condition eliminated(Loop at level 1 peeled) at line 320 
      remark #25260: Invariant Condition eliminated(Proven False) at line 320
      remark #25258: Invariant Condition eliminated(Loop at level 2 peeled) at line 322 
      remark #25260: Invariant Condition eliminated(Proven False) at line 322
      remark #15389: vectorization support: reference tmp_cells->speed1[index] has unaligned access   [ d2q9-bgk-vectorized.c(329,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[index] has unaligned access   [ d2q9-bgk-vectorized.c(330,9) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(330,36) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[index] has unaligned access   [ d2q9-bgk-vectorized.c(331,9) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(331,36) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[index] has unaligned access   [ d2q9-bgk-vectorized.c(332,9) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(332,36) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[index] has unaligned access   [ d2q9-bgk-vectorized.c(333,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[index] has unaligned access   [ d2q9-bgk-vectorized.c(334,9) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(334,36) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[index] has unaligned access   [ d2q9-bgk-vectorized.c(335,9) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(335,36) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[index] has unaligned access   [ d2q9-bgk-vectorized.c(336,9) ]
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(343,18) ]
      remark #15389: vectorization support: reference cells->speed1[x_w+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(344,18) ]
      remark #15389: vectorization support: reference cells->speed2[ii+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(345,18) ]
      remark #15389: vectorization support: reference cells->speed4[ii+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(347,18) ]
      remark #15389: vectorization support: reference cells->speed5[x_w+y_s*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(348,18) ]
      remark #15389: vectorization support: reference cells->speed8[x_w+y_n*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(351,18) ]
      remark #15389: vectorization support: reference tmp_cells->speed0[index] has unaligned access   [ d2q9-bgk-vectorized.c(443,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[index] has unaligned access   [ d2q9-bgk-vectorized.c(444,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[index] has unaligned access   [ d2q9-bgk-vectorized.c(445,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[index] has unaligned access   [ d2q9-bgk-vectorized.c(446,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[index] has unaligned access   [ d2q9-bgk-vectorized.c(447,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[index] has unaligned access   [ d2q9-bgk-vectorized.c(448,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[index] has unaligned access   [ d2q9-bgk-vectorized.c(449,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[index] has unaligned access   [ d2q9-bgk-vectorized.c(450,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[index] has unaligned access   [ d2q9-bgk-vectorized.c(451,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[index] has unaligned access   [ d2q9-bgk-vectorized.c(329,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[index] has unaligned access   [ d2q9-bgk-vectorized.c(330,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[index] has unaligned access   [ d2q9-bgk-vectorized.c(331,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[index] has unaligned access   [ d2q9-bgk-vectorized.c(332,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[index] has unaligned access   [ d2q9-bgk-vectorized.c(333,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[index] has unaligned access   [ d2q9-bgk-vectorized.c(334,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[index] has unaligned access   [ d2q9-bgk-vectorized.c(335,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[index] has unaligned access   [ d2q9-bgk-vectorized.c(336,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed1[index] has unaligned access   [ d2q9-bgk-vectorized.c(444,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed2[index] has unaligned access   [ d2q9-bgk-vectorized.c(445,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed3[index] has unaligned access   [ d2q9-bgk-vectorized.c(446,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed4[index] has unaligned access   [ d2q9-bgk-vectorized.c(447,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed5[index] has unaligned access   [ d2q9-bgk-vectorized.c(448,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed6[index] has unaligned access   [ d2q9-bgk-vectorized.c(449,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed7[index] has unaligned access   [ d2q9-bgk-vectorized.c(450,9) ]
      remark #15389: vectorization support: reference tmp_cells->speed8[index] has unaligned access   [ d2q9-bgk-vectorized.c(451,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(329,36) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(333,36) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(336,36) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed3[x_e+jj*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(346,18) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed6[x_e+y_s*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(349,18) ]
      remark #15415: vectorization support: irregularly indexed load was generated for the variable <cells->speed7[x_e+y_n*params.nx]>, part of index is nonlinearly computed   [ d2q9-bgk-vectorized.c(350,18) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.239
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 25 
      remark #15451: unmasked unaligned unit stride stores: 16 
      remark #15456: masked unaligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 6 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 306 
      remark #15477: vector cost: 110.000 
      remark #15478: estimated potential speedup: 2.580 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(315,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(256,1):remark #34051: REGISTER ALLOCATION : [rebound_collision] d2q9-bgk-vectorized.c:256

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1226
            Global    :     281
            Local     :     945
        Regenerable   :      65
        Spilled       :     172
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :    2032 bytes*
            Reads     :     456 [1.24e+04 ~ 21.1%]
            Writes    :     217 [4.60e+03 ~ 7.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: write_values(const t_param, t_speed_new *, int *, float *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (write_values(const t_param, t_speed_new *, int *, float *)) [3/12=25.0%] d2q9-bgk-vectorized.c(788,1)
  -> EXTERN: (797,8) fopen(const char *, const char *)
  -> INLINE: (801,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (852,7) fprintf(FILE *, const char *, ...)
  -> EXTERN: (856,3) fclose(FILE *)
  -> EXTERN: (858,8) fopen(const char *, const char *)
  -> INLINE: (862,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (867,5) fprintf(FILE *, const char *, ...)
  -> EXTERN: (870,3) fclose(FILE *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(804,3)
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ d2q9-bgk-vectorized.c(852,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between cells->speed1 (827:9) and call:fprintf(FILE *, const char *, ...) (852:7)
   remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *, const char *, ...) (852:7) and cells->speed1 (827:9)

   LOOP BEGIN at d2q9-bgk-vectorized.c(806,5)
      remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ d2q9-bgk-vectorized.c(852,7) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between cells->speed1 (827:9) and call:fprintf(FILE *, const char *, ...) (852:7)
      remark #15346: vector dependence: assumed FLOW dependence between call:fprintf(FILE *, const char *, ...) (852:7) and cells->speed1 (827:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(865,3)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ d2q9-bgk-vectorized.c(867,5) ]
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(788,1):remark #34051: REGISTER ALLOCATION : [write_values] d2q9-bgk-vectorized.c:788

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     153
            Global    :      36
            Local     :     117
        Regenerable   :      45
        Spilled       :      11
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [5.28e+01 ~ 3.8%]
            Writes    :       6 [1.62e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: timestep(const t_param, t_speed_new **, t_speed_new **, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (timestep(const t_param, t_speed_new **, t_speed_new **, int *)) [4/12=33.3%] d2q9-bgk-vectorized.c(210,1)
  -> INLINE: (211,3) accelerate_flow(const t_param, t_speed_new *, int *) (isz = 136) (sz = 147)
  -> (216,18) rebound_collision(const t_param, t_speed_new *, t_speed_new *, int *) (isz = 651) (sz = 664)
     [[ Inlining would exceed -inline-max-size value (664>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(232,3) inlined into d2q9-bgk-vectorized.c(211,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speed1+(ii+jj*params.nx)*4) (242:7) and *(cells->speed7+(ii+jj*params.nx)*4) (248:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speed7+(ii+jj*params.nx)*4) (248:7) and *(cells->speed1+(ii+jj*params.nx)*4) (242:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(216,18):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
d2q9-bgk-vectorized.c(210,1):remark #34051: REGISTER ALLOCATION : [timestep] d2q9-bgk-vectorized.c:210

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rbp rsi rdi r8-r11 r14-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :      66
            Global    :      25
            Local     :      41
        Regenerable   :       8
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: accelerate_flow(const t_param, t_speed_new *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (accelerate_flow(const t_param, t_speed_new *, int *)) [5/12=41.7%] d2q9-bgk-vectorized.c(224,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(232,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speed1+(ii+jj*params.nx)*4) (242:7) and *(cells->speed7+(ii+jj*params.nx)*4) (248:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(cells->speed7+(ii+jj*params.nx)*4) (248:7) and *(cells->speed1+(ii+jj*params.nx)*4) (242:7)
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(224,1):remark #34051: REGISTER ALLOCATION : [accelerate_flow] d2q9-bgk-vectorized.c:224

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm11]
        
    Routine temporaries
        Total         :      53
            Global    :      20
            Local     :      33
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: av_velocity(const t_param, t_speed_new *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (av_velocity(const t_param, t_speed_new *, int *)) [6/12=50.0%] d2q9-bgk-vectorized.c(496,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(504,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(514,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(515,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(516,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(517,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(518,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(519,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(520,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(521,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(522,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(525,22) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(526,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(527,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(528,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(529,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(530,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(533,22) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(534,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(535,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(536,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(537,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(538,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 147 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.890 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(496,1):remark #34051: REGISTER ALLOCATION : [av_velocity] d2q9-bgk-vectorized.c:496

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     224
            Global    :      34
            Local     :     190
        Regenerable   :       9
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       5 [1.85e+01 ~ 0.5%]
            Writes    :       5 [1.53e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: finalise(const t_param *, t_speed_new **, t_speed_new **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (finalise(const t_param *, t_speed_new **, t_speed_new **, int **, float **)) [7/12=58.3%] d2q9-bgk-vectorized.c(738,1)
  -> EXTERN: (742,3) _mm_free(void *)
  -> EXTERN: (745,3) _mm_free(void *)
  -> EXTERN: (748,3) free(void *)
  -> EXTERN: (751,3) free(void *)


    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(738,1):remark #34051: REGISTER ALLOCATION : [finalise] d2q9-bgk-vectorized.c:738

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rbp rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      24
            Global    :      10
            Local     :      14
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: calc_reynolds(const t_param, t_speed_new *, int *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (calc_reynolds(const t_param, t_speed_new *, int *)) [8/12=66.7%] d2q9-bgk-vectorized.c(759,1)
  -> INLINE: (762,10) av_velocity(const t_param, t_speed_new *, int *) (isz = 204) (sz = 215)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(504,3) inlined into d2q9-bgk-vectorized.c(762,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5) inlined into d2q9-bgk-vectorized.c(762,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5) inlined into d2q9-bgk-vectorized.c(762,10)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(514,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(515,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(516,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(517,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(518,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(519,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(520,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(521,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(522,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(525,22) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(526,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(527,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(528,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(529,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(530,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(533,22) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(534,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(535,25) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(536,26) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(537,28) ]
      remark #15389: vectorization support: reference *(local_density+(ii+jj*params.nx)*4) has unaligned access   [ d2q9-bgk-vectorized.c(538,28) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.361
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 21 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 147 
      remark #15477: vector cost: 32.870 
      remark #15478: estimated potential speedup: 3.890 
      remark #15486: divides: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(506,5) inlined into d2q9-bgk-vectorized.c(762,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(759,1):remark #34051: REGISTER ALLOCATION : [calc_reynolds] d2q9-bgk-vectorized.c:759

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     230
            Global    :      35
            Local     :     195
        Regenerable   :      10
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       6 [2.30e+01 ~ 0.6%]
            Writes    :       6 [1.62e+01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: total_density(const t_param, t_speed_new *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (total_density(const t_param, t_speed_new *)) [9/12=75.0%] d2q9-bgk-vectorized.c(766,1)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(769,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vectorized.c(771,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(771,5)
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(773,16) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(774,16) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(775,16) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(776,16) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(777,16) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(778,16) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(779,16) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(780,16) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(781,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.017
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 3.620 
      remark #15478: estimated potential speedup: 5.990 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(771,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference cells->speed0[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(773,16) ]
      remark #15389: vectorization support: reference cells->speed1[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(774,16) ]
      remark #15389: vectorization support: reference cells->speed2[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(775,16) ]
      remark #15389: vectorization support: reference cells->speed3[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(776,16) ]
      remark #15389: vectorization support: reference cells->speed4[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(777,16) ]
      remark #15389: vectorization support: reference cells->speed5[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(778,16) ]
      remark #15389: vectorization support: reference cells->speed6[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(779,16) ]
      remark #15389: vectorization support: reference cells->speed7[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(780,16) ]
      remark #15389: vectorization support: reference cells->speed8[ii+jj*params.nx] has unaligned access   [ d2q9-bgk-vectorized.c(781,16) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 2.067
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at d2q9-bgk-vectorized.c(771,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(766,1):remark #34051: REGISTER ALLOCATION : [total_density] d2q9-bgk-vectorized.c:766

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     174
            Global    :      63
            Local     :     111
        Regenerable   :       6
        Spilled       :      38
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     304 bytes*
            Reads     :      66 [2.76e+02 ~ 9.1%]
            Writes    :      67 [2.34e+02 ~ 7.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: die(const char *, const int, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (die(const char *, const int, const char *)) [10/12=83.3%] d2q9-bgk-vectorized.c(876,1)
  -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (879,3) fflush(FILE *)
  -> EXTERN: (880,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(876,1):remark #34051: REGISTER ALLOCATION : [die] d2q9-bgk-vectorized.c:876

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rbx rsi rdi]
        
    Routine temporaries
        Total         :      28
            Global    :       1
            Local     :      27
        Regenerable   :       9
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: usage(const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (usage(const char *)) [11/12=91.7%] d2q9-bgk-vectorized.c(884,1)
  -> EXTERN: (885,3) fprintf(FILE *, const char *, ...)
  -> EXTERN: (886,3) exit(int)


    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(884,1):remark #34051: REGISTER ALLOCATION : [usage] d2q9-bgk-vectorized.c:884

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: initialise(const char *, const char *, t_param *, t_speed_new **, t_speed_new **, int **, float **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (initialise(const char *, const char *, t_param *, t_speed_new **, t_speed_new **, int **, float **)) [12/12=100.0%] d2q9-bgk-vectorized.c(554,1)
  -> EXTERN: (562,8) fopen(const char *, const char *)
  -> EXTERN: (566,5) sprintf(char *, const char *, ...)
  -> INLINE: (567,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (571,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (573,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (575,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (577,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (579,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (581,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (583,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (585,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (587,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (589,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (591,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (593,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (595,12) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (597,20) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (600,3) fclose(FILE *)
  -> EXTERN: (624,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (625,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (626,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (627,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (628,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (629,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (630,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (631,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (632,26) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (633,26) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (634,26) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (638,34) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (639,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (640,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (641,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (642,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (643,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (644,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (645,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (646,30) _mm_malloc(unsigned long long, unsigned long long)
  -> EXTERN: (647,30) _mm_malloc(unsigned long long, unsigned long long)
  -> INLINE: (648,30) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (651,20) malloc(size_t)
  -> INLINE: (653,31) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (700,8) fopen(const char *, const char *)
  -> EXTERN: (704,5) sprintf(char *, const char *, ...)
  -> INLINE: (705,5) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (709,20) __isoc99_fscanf(FILE *, const char *, ...)
  -> EXTERN: (709,20) __isoc99_fscanf(FILE *, const char *, ...)
  -> INLINE: (712,22) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE: (714,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE: (716,40) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> INLINE: (718,23) die(const char *, const int, const char *) (isz = 14) (sz = 22)
    -> EXTERN: (877,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (878,3) fprintf(FILE *, const char *, ...)
    -> EXTERN: (879,3) fflush(FILE *)
    -> EXTERN: (880,3) exit(int)
  -> EXTERN: (725,3) fclose(FILE *)
  -> EXTERN: (731,26) malloc(size_t)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at d2q9-bgk-vectorized.c(660,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speed0[ii+jj*params->nx] (677:9) and *cells_ptr->speed8[ii+jj*params->nx] (686:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speed8[ii+jj*params->nx] (686:9) and *cells_ptr->speed0[ii+jj*params->nx] (677:9)

   LOOP BEGIN at d2q9-bgk-vectorized.c(662,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speed0[ii+jj*params->nx] (677:9) and *cells_ptr->speed8[ii+jj*params->nx] (686:9)
      remark #15346: vector dependence: assumed OUTPUT dependence between *cells_ptr->speed8[ii+jj*params->nx] (686:9) and *cells_ptr->speed0[ii+jj*params->nx] (677:9)
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(691,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at d2q9-bgk-vectorized.c(693,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at d2q9-bgk-vectorized.c(693,5)
         remark #15389: vectorization support: reference obstacles_ptr has unaligned access   [ d2q9-bgk-vectorized.c(695,9) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.620 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at d2q9-bgk-vectorized.c(693,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at d2q9-bgk-vectorized.c(709,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

d2q9-bgk-vectorized.c(693,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
d2q9-bgk-vectorized.c(693,5):remark #34026: call to memset implemented as a call to optimized library version
d2q9-bgk-vectorized.c(554,1):remark #34051: REGISTER ALLOCATION : [initialise] d2q9-bgk-vectorized.c:554

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     599
            Global    :     115
            Local     :     484
        Regenerable   :     236
        Spilled       :      15
        
    Routine stack
        Variables     :    1036 bytes*
            Reads     :       3 [1.63e+01 ~ 1.1%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      18 [4.14e+01 ~ 2.8%]
            Writes    :      12 [7.40e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The function is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any function that would
    normally be inlined, add "inline __attribute__((always_inline))" to the
    declaration of the called function, or add "#pragma forceinline" before
    the call site.

